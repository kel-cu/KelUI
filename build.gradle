plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

apply plugin: 'com.github.johnrengelman.shadow'
version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    maven { url = "https://maven.terraformersmc.com/releases" }
    maven { url = "https://maven.meteordev.org/releases" }
    maven { url = 'https://repo.kelcuprum.ru/snapshots' }
    maven { url = 'https://repo.kelcuprum.ru/releases' }
    maven { url = 'https://repo.kelcuprum.ru/forks' }
    maven { url = 'https://repo.kelcuprum.ru/test' }
    maven { url = "https://maven.parchmentmc.org" } // MAPPINGS
    maven { url = 'https://api.modrinth.com/maven'}
    maven { url = "https://cursemaven.com" }
    maven { url = "https://jitpack.io/" }
}

loom {
    accessWidenerPath = file("src/main/resources/kelui.accesswidener")
}

configurations { shade }
dependencies {
    // Minecraft/Fabric libs
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment "org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip"
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // Mods libs
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    //
    modImplementation("ru.kelcuprum:AlinLib-fabric:${project.alinlib}")
    include modImplementation("maven.modrinth:cicada:${project.cicada_version}")

    modCompileOnly("maven.modrinth:sodium-extra:${project.sodium_extra_version}")
    modCompileOnly("maven.modrinth:sodium:${project.sodium_version}") // 0.6
    modCompileOnly("maven.modrinth:flashback:${project.flashback}")
    modCompileOnly("maven.modrinth:capes:6SzVPVR4")
    modCompileOnly("maven.modrinth:skinshuffle:IKBsfEhV")
    modCompileOnly("curse.maven:Catalogue-459701:5896177")
    modCompileOnly("maven.modrinth:entitytexturefeatures:uORav9Nu")

    include(implementation ("meteordevelopment:starscript:0.2.2"))

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    subprojects.each {
        implementation project(path: ":${it.name}", configuration: 'namedElements')
        implementation project(path: ":${it.name}", configuration: 'shade')
        include project("${it.name}:")
    }
}


processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

test {
    useJUnitPlatform()
}

// Produce additional distributions
java {
    withSourcesJar()
}

// Produce a fat-jar of all shaded dependencies
shadowJar {
    configurations = [project.configurations.shade]
    destinationDirectory.set(layout.buildDirectory.dir('devlibs'))
}

remapJar {
    dependsOn tasks.shadowJar
    inputFile.set(tasks.shadowJar.archiveFile)
}

components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) { skip() }

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}